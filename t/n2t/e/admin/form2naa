#! /usr/bin/env perl

use 5.010;
use strict;
use warnings;

use Text::ParseWords;
use YAML;
use Encode;
use utf8;
use Try::Tiny;          # for exceptions
use Safe::Isa;          # provides $_isa (yyy remind for what purpose?)
use HTML::Entities;

# Author:  John A. Kunze, jak@ucop.edu, California Digital Library
# Copyright (c) 2016-2021 UC Regents

my ($remail, $rname, $naan, $request, $orig_request);	# $naan is unused naan
my $default_remail = 'curtis.curator@example.org';
my $default_rname = 'Curtis Curator';
my $msg;

my $request_default = << 'EOT';
I would like	To request a new NAAN
Organization name:	Institut national des voisins
Are you a service provider?	No, or I'm not sure
Contact name:	Rip van Winkle
Contact email address:	rvw@catskills.us
Position in organization:	Data architect
Organization address:	4 avenue de la Guerre, 54321 Bry-sur-Marne
Organization base URL:	http://example.org
Organization status:	Not-for-profit
Organization acronym preferred: IV
Service provider contact information: Sam &quot;Sam&quot; Smith, ss@aaa.example.org, Acme Archiving
Committed to data persistence?	Agree
EOT

$request_default = << 'EOT';
I would like	To request a new NAAN
Organization name:	Acta Académica
Are you a service provider?	Yes
Service provider contact information:	Acta Académica, Pablo De Grande, pablodg@aacademica.org
Contact name:	Queipo, Rodrigo
Contact email address:	contacto@aacademica.org
Position in organization:	archivist
Organization address:	Pedro Morán 2946, Buenos Aires, Argentina
Organization status:	Not-for-profit
Organization acronym preferred:	AA
Organization base URL:	https://aacademica.org
Committed to data persistence?	Agree
EOT

#my $response_admin = "naan-registrar\@googlegroups.com, $provider";
my $request_file = 'request';
my $new_naa_file = 'new_entry';
my $request_log = 'request_log';
my $default_naan = '98765';

my $home = "/apps/n2t";
my $workdirbase = "$home/naans";
my $validator = "$home/local/bin/validate_naans";

my $cmd = $0;
$cmd =~ s,.*/,,;		# drop path part
my $usage_text = << "EOT";
NAME
    $cmd - convert a NAAN request form to a registry entry

SYNOPSIS
    $cmd [ --github ] FormFile [ NAAN ]

DESCRIPTION
    XXX heavily modified for the "-" stdin case, expecting
    XXX when invoked via web, there will never be a NAAN arg
    If any of the first 3 lines are empty, we're not doing this for real.
       line 1: email
       line 2: your name (given name then family name, eg, Sam Smith)
       line 3: NAAN
       lines 4-: form output

    The $cmd script converts a NAAN request form to a registry entry that
    is stored in the current directory under the filename, "$new_naa_file".

    The FormFile is a file of form data in YAML (or CSV format, but CSV is
    not really tested). Data is usually entered via the
    https://goo.gl/forms/bmckLSPpbzpZ5dix1 form and delivered either by
    downloading a CSV file or pasting from an email generated from the
    filled-out form. If FormFile is given as '-', its contents are
    expected on stdin.

    If the NAAN is not given as a command argument, it should be given as
    head of a small block of form data in the FormFile. The block begins
    with the NAAN on a line by itself, and the remaining block lines should
    contain filled out form data up to a line starting "----". Unless the
    --github option is given, that block must be line 1 of FormFile; this
    option supports use of this script running in a github workflow (which
    allows the maintainer not to have to run under a Unix-like platform).
    
    Before calling, the caller will have selected the NAAN by editing the
    ./candidate_naans file and moving the top unassigned NAAN up over the
    line into the assigned NAANs part of the file.  As an example, the
    received form

      Contact name:	Gautier Poupeau
      Contact email address:	gpoupeau\@ina.fr
      Organization name:	Institut national de l'audiovisuel
      Position in organization:	Data architect
      Organization address:	4 avenue de l'Europe, 94366 Bry-sur-Marne Cedex
      Organization base URL:	http://www.ina.fr
      Organization status:	For profit
      Service provider contact information: Sam Smith, ss\@aaa.example.org, Acme Archiving

    with NAAN 99999 specified produces

      naa:
      who:    Institut national de l'audiovisuel (=) INA
      what:   99999
      when:   2016.09.23
      where:  https://www.ina.fr
      how:    FP | (:unkn) unknown | 2016 |
      !why:   ARK
      !contact: Poupeau, Gautier ||| gpoupeau\@ina.fr |
      !address: 4 avenue de l'Europe, 94366 Bry-sur-Marne Cedex
      !provider: Sam Smith, ss\@aaa.example.org, Acme Archiving

EOT

my $html_head = << 'EOT';

<html lang="en">
<head>
    <!-- Basic Page Needs -->
  <meta charset="utf-8">
  <meta name="description" content="">
  <meta name="author" content="">

  <!-- Mobile Specific Metas -->
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- CSS -->
  <link rel="stylesheet" href="/e/css/flexboxgrid-6.3.1-min.css">
  <link rel="stylesheet" href="/e/css/styles.css">
  <link rel="stylesheet" href="/e/css/styles_rst.css">
  <link rel="shortcut icon" type="image/png" href="/e/images/favicon.ico?v=2"/>
  <link rel="icon" sizes="16x16 32x32" href="/e/images/favicon.ico?v=2">

  <title>Review candidate NAAN entry</title>
</head>
<body>
<div class="content">
<header class="header row center-xs">
  <div class="col-xs-12 col-sm-10">
    <div class="row middle-xs header">
      <p class="col-xs header-logo-left center-horiz">
        <img src="/e/images/n2t_net_logo.png" alt="N2T.net logo"
	  width="auto" height="56"/>
      </p>
      <p class="col-xs header-logo-right center-horiz" style="font-size:1.4em;">
        RESOLVING
	<br/>
	Names to Things
      </p>
      <p align="right" class="single-space">
        <a href="/e/about.html">About</a><br/>
        <a href="/e/partners.html">N2T Partners</a><br/>
        <a href="/e/n2t_apidoc.html">API Documentation</a>
      </p>
    </div>
  </div>
</header>

<div class="container-narrowest">
<div class="section" id="naanq2e">
<h1>Review candidate NAAN entry</h1>

EOT

my $no_gen = 1;			# yyy constant
my $from_vim = 0;
my $github = 0;
my $naan_restored = 0;
my $real_thing;

sub perr {
	say STDERR '<pre>';
	print STDERR ($from_vim ? "# Error: " : "Error: ");
	say STDERR @_;
	say STDERR '</pre>';
}

sub from_submit { my( $naan, $input, $form_content )=@_;
		# yyy $form_content is original, unaltered $input

	# make last char before tab be a :, replacing a : or ?, if any
	s/[:?]?\t+/: /g and	# YAML needs : and forbids tab-for-space, and
		# as long as we're not doing CSV fields, elide \n in front of
		s/\n([^:]*)$/ $1/m and	# lines with no colon (a contin. line),
		s/$/\n/;		# but make sure whole thing ends in \n

	# Flag annoying non-ascii punctuation (eg, ' and -). Unicode errors
	# happen that raise fatal exceptions happen too often to leave them
	# uncaught.

#perr("xxx _: $_");
# Move this test earlier?
	my @uchars;
        try {
		@uchars = split '', decode('utf8', $_);
        }
        catch {
		# xxx why can't I block the exception with args to decode()?
		$msg = << 'EOT';
Oops, it looks like there are some unicode decoding errors that need to
be fixed. Usually this requires replacing characters that can look like
apostrophes ("'") and long hyphens ("-") with plain ASCII apostrophes and
hyphens. Please go back, try that, and resubmit.
EOT
		perr($msg);
		# xxx for some reason this doesn't work -- does it make sense?
		/\P{ascii}/ && /\p{Punctuation}/ && perr(
			"warning: non-ascii punctuation: ", encode('utf8', $_))
				for (@uchars);
                return '';
        };
	#my @uchars = split '', decode('utf8', $_);



	# Get parts of today's date.
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
	$year += 1900;
	$mon = sprintf("%02d", $mon + 1);
	$mday = sprintf("%02d", $mday);

	# Only look for CSV input when a flag is set (in a way yet TBD).
	my $csv_input = 0;
	# CSV fields:
	# "Timestamp","Contact name:","Contact email address:","Organization name:","Position in organization:","Organization address:","Organization base URL:","Organization status:","Service provider:","Organization acronym preferred:","Other information:"
	my $timestamp;			# unused field if it's a CSV parse
	my $h;				# hash if it's a YAML parse
	my ($fullname, $email, $orgname, $role, $address,
		$URL, $ostatus, $provider, $acronym, $other);
	my ($firstname, $lastname);
	my $copy_err;

	# Input is in request form (via Submit) or in ANVL form (via Retest or
	# Confirm). If the latter, we need to massage it into YAML first.

	# xxx very flawed test -- do real csv parse instead,
	#     or check for occurrences of "," ?
	#     often the org address has many commas -- don't check that field?
	if ($csv_input) {
		(			# assume input is in CSV-format
			$timestamp,			# unused field
			$fullname, $email, $orgname, $role, $address,
				$URL, $ostatus, $provider, $acronym, $other
		) = Text::ParseWords::parse_line(',', 0, $_);
		$copy_err = '';		# not actually checking for an error
		# xxx should limit to number of fields, eg, in face of
		# texty "Other info"
	}
	else {
perr("xxx before submit Load: $_");
		try {
			$h = Load($_);	# YAML parse, returning hash reference

			# If the first and last fields aren't present,
			# there's likely an incomplete copy/paste job.

			$copy_err = ! $h->{'Organization name'} ||
				    ! $h->{'Committed to data persistence'}
				    ? "Missing organization name or commitment."
				    : '';

			$fullname = $h->{'Contact name'} || '';
			$orgname = $h->{'Organization name'} || '';
			$acronym = $h->{'Organization acronym preferred'} || '';
			$ostatus = $h->{'Organization status'} || '';
			$URL = $h->{'Organization base URL'};
			$email = $h->{'Contact email address'};
			$address = $h->{'Organization address'};
			#$provider = $h->{'Service provider'} || '';
			$provider = $h->{'Service provider contact information'} || '';
# XXX decide whether to change this or not! (probably not)
# XXX alter form letter to say that a service provider has submitted this
#     on your behalf of you and your organization
# XXX change "Thank you for your request." to "A request for a NAAN has been submitted on behalf of you and your organization by <insert name here> of <insert company name here>."
# XXX make automatic form response go to service provider
# Service provider contact information:   Guillaume LORY, solution Ligeo Archives : guillaume.lory@empreintedigitale.fr
			$role = $h->{'Position in organization'} || '';
			$other = $h->{'Other information'} || '';
		}
		catch {
			$copy_err = "YAML error, likely a copy paste problem.";
		}
	}
	# yyy check if YAML strips surrounding whitespace
	if ($copy_err) {
		perr("Looks like an incomplete request. Please go back "
			. "and check for a copy/paste error.\n$copy_err");
		return '';
	}

	# Get part of personal name (just a guess, so bears checking)
	($firstname, $lastname) = $fullname =~ /^\s*(.+)\s+(\S+)\s*$/ or
		perr("could not parse personal name \"$fullname\""),
		return '';
	unless ($acronym) {
		$acronym = $orgname;
		# drop stop words in English, French, and Spanish
		$acronym =~ s/\b(?:the|and|of|l[ae']|et|d[eu']|des)\b//g;
		# stop possessive 's' from showing up in the acronym
		# XXX bug: non-ascii being mistaken for word boundaries?
		#     eg, who:    Euro France Médias (=) EFM?D
		$acronym =~ s/\b's\b//g;
		$acronym =~ s/\b(.).*?\b/\U$1/g;	# first letter
	}

	my $bmodel =
		($ostatus eq 'For profit' ? 'FP' :
		($ostatus eq 'Not-for-profit' ? 'NP' :
			"ORGSTATUS: $ostatus"));
	#if ($bmodel !~ /^[FN]P$/) {
	#	push @err_list, "Change ORGSTATUS ($ostatus) to FP or NP";
	#}


	# yyy should lc hostname part
	$URL =~ s,[./]+\s*$,,;		# remove terminal / or . if any
	$URL =~ m,^https?://, or
		$URL = 'https://' . $URL;	# clothe a naked hostname
	my $provider_line = $provider;
	$provider_line and
		$provider_line = "\n!provider: $provider_line";
	$other =~ /./ and		# if it has real content
		say STDERR "Note other info: |$other|";		# not an error

	# Build up request to save in a file.
	my $request = '';
	$request .= "Date:\t$year.$mon.$mday\n";	# date processed
	$from_vim and			# if from vim, clothe naked NAAN with
		$request .= "Candidate NAAN:\t";	# label prepended
	$request .= $form_content;
	open OUT, "> $request_file" or
		perr("could not open $request_file for writing"),
		return '';
	say OUT "$request";
	close OUT;

	my $naa_entry = 
"naa:
who:    $orgname (=) $acronym
what:   $naan
when:   $year.$mon.$mday
where:  $URL
how:    $bmodel | (:unkn) unknown | $year |
!why:   ARK
!contact: $lastname, $firstname ($role) ||| $email |
!address: $address$provider_line

";
	return ($naa_entry, $orgname, $firstname, $email, $provider);
}

# main
{
	use open qw/:std :utf8/;
	$#ARGV < 0 || $ARGV[0] =~ /^--*h/ and	# eg, -help, --help
		print($usage_text),
		exit 0;
	if ($ARGV[0] =~ /^--github/) {
		$github = 1;
		$from_vim = 1;
		# yyy $from_vim behavior may become default in github actions
		shift;
	}

	my $FormFile = $ARGV[0];
	shift;
	$FormFile ne '-' and
		unshift @ARGV, $FormFile;

	print $html_head;

	my $errs = 1;
	my $warnings = 1;

	# Read the input file.
	local $/;		# set input mode to slurp whole file at once
	$_ = <>;		# slurp entire file from stdin or named arg
	s/\n+/\n/;		# make sure it ends in just one newline
	my $form_content = $_;	# make copy of form content, including NAAN

	# check for a block in the file and isolate it into $_ by
	# deleting everything around it
	s/^\s*\n//mg;		# drop blank lines
	s/^\s*#.*\n//mg;	# drop comment lines

	# Split the input block into params added by CGI script
	# and params copied in from request form data.

	if (! s/^remail: (.*)\nrname: (.*)\nunaan: (.*)\nrequest: //) {
		perr("missing form data (block $_");
		exit 2;
	}
	# XXX only getting $naan
	($remail, $rname, $naan) = ($1, $2, $3);

	my ($naa_entry, $orgname, $firstname, $email, $provider);

	my $retest = 0;		# by default, assume first submission
	if (! $naan and /^naa:/) {	# Retest or Confirm case
		$retest = 1;		# default overridden
# XXX see validate for regex
		if (! m{ who:\s+(.*?)\s*\n
			 what:\s+(.*?)\s*\n
			 .*?\n
			 !contact:\s+[^,]*,\s+(\S+?)
				}xs) {
			perr("Malformed candidate NAAN entry: $_");
			exit 1;
		}
		($naa_entry, $orgname, $naan, $firstname, $email, $provider) =
			($_, $1, $2, $3, "XXX", "XXX");
		#$orig_request = File::slurp();
	}
	else {				# Submit case
		$naan ||= $default_naan;
		$orig_request = /^\s*$/		# if empty request
			? $request_default	# use default
			: $_			# else use supplied data
		;
		my $safe_orig_request = decode_entities( $orig_request );
		$_ = $safe_orig_request;

		($naa_entry, $orgname, $firstname, $email, $provider) =
			from_submit($naan, $_, $form_content);
	}
	if (! $naa_entry) {	# $naa_entry must be defined
		exit 1;
	}

	if ($naan !~ /^[s\d][\d]+$/) {
		perr("Bad NAAN specified: $naan");
		perr("NAAN must be all digits (optionally preceded by 's') "
			. " or empty.");
		#perr("Please go back and resubmit.");
		exit 1;
	}


	### Begin: initialize working directory, $workdir.

	my $workdir = "$workdirbase/$naan";
	my $main_naans = "$workdir/naan_reg_priv/main_naans";
	my $cand_naans = "$workdir/naan_reg_priv/candidate_naans";
	if (! -d $workdir) {
		`mkdir -p $workdir`;
	}
	if (! chdir($workdir)) {
		perr("could not chdir to $workdir: $!");
		exit 1;
	}
	my $out = `pwd; ls`;
	say "xxx out=$out";
	$out = `
		rm -fr naan_reg_priv;
		git clone git\@github.com:jkunze/naan_reg_priv.git 2>&1;
	`;

	### End: initialize working directory, $workdir.

	if ($naan eq $default_naan) {	# then we're just in test/play mode
		$remail = $default_remail;
		$rname = $default_rname;
	}
	else {
		my $grep = `grep "$naan" $cand_naans`;
		#perr("xxx grep=$grep");
		if ($grep !~ /^$naan\s+(\S+)\s+(.*)\n$/) {
			perr( << "EOT" );
the <em>candidate_naans</em> file on github contained no line of the form

   <em>$naan YourEmail FirstName LastName</em>

Cannot proceed without such a line. (Did you remember to COMMIT?)
EOT
			exit 1;
		}
		($remail, $rname) = ($1, $2);
		# 58828 jak@ucop.edu Jon Kunze

	}
	# xxx other tests? eg
	#      other lines that are neither comment nor pure NAAN?
	# xxx procedure for adding sDDDDDDDDD naans?
	# xxx need daemon to expire and remove directories over N weeks old

	open OUT, "> $new_naa_file" or
		perr("could not open $new_naa_file for writing"),
		exit 1;
	print OUT "$naa_entry";
	close OUT;
	#say "xxx: new_naa_file: $new_naa_file";

	#say "<h3>Candidate NAAN entry</h3><p>";
	my $safe_naa_entry = encode_entities( $naa_entry );
	say << "EOT";
<pre>
<form id="entryform" action="/e/admin/q2e.pl">
<textarea name="request" cols="84" rows="13" id="request" form="entryform">
$safe_naa_entry
</textarea>
</pre>
EOT

	my $validate = `cat $new_naa_file >> $main_naans`;

	#my $validate = `cat $new_naa_file >> $main_naans && \
	#			$validator $main_naans`;

	use lib "/apps/n2t/local/lib";
	use NAAN;
	my $contact_info = 1;	# 1 means contact info is present
	my ($ok, $msg, $Rerrs) =
		NAAN::validate_naans($main_naans, $contact_info);

	my $safe_validate = encode_entities( $msg );
	$safe_validate =~ s|\n|<br/>|g;

	my $test_or_confirm;
	if (! $ok and scalar(@$Rerrs)) {
		$test_or_confirm = "Retest";
		say "<p>Errors:<ol>";
		for my $e (@$Rerrs) {
			say "<li>", encode_entities( $e ), "</li>";
		}
		say "</ol></p>";
		say "<p>Changes required.";
	}
	else {
		$test_or_confirm = "Confirm";
		say "<p>";
	}

	say << "EOT";
&nbsp; &nbsp; &nbsp; &nbsp;
<input type="submit" value="$test_or_confirm">
<input type="hidden" id="request" name="origrequest" value="$orig_request">
<br/>
remail=$remail, name=$rname
<br/>
Status: &nbsp; &nbsp; &nbsp; $safe_validate
</p>
</form>
EOT

	##say "$naa_entry";
	#say "<h3>Original request</h3><p>";
	#$orig_request =~ s|\n|<br/>\n|sg;
	#say "<p>$orig_request</p>";

exit 0;





# XXX  
# =========== if doesn't validate, stop here ===========
`cat $main_naans $naa_entry > trial_naans; ./validate.pl trial_naans`;

	my $form_dest = $remail
		? "is being emailed to you"
		: "appears below"
	;
	if ($from_vim) {
		say "# $naan $orgname";
		say "!# At github, use the comment line above to change the NAAN status";
		say "!# to 'used', and append the entry below to the 'main_naans' file.";
		say "!# Form letter for responding to requester $form_dest.";
		#say "!# Move this line and entry below ",
		#	"(leaving the ----- line) to main_naans.";
		print $naa_entry;
	}
	else {
		say "New NAA entry below saved in file \"$new_naa_file\".";
		print $naa_entry;
	}

	open OUT, ">> $request_log" or
		perr("could not open $request_log for appending"),
		exit 1;
	say OUT "$request";		# log request saved earlier
	close OUT;
	! $from_vim and
		say "Request file '$FormFile' saved in file \"$request_log\".";

	my $institution = $orgname;	# if org has a secondary name,
	$institution =~ s/ \(=\).*//;	# reduce it to a primary name
	#Subject: NAAN request for $acronym

	my $pseudonaan = $naan;			# xxx lots of garbage in there
	$naan =~ s/Got id = (\d+).*/$1/s;	# xxx new change not tested!

	#$no_exec and
	#	exit 0;			# nothing left to do

	# XXX when/if this text is converted to hypertext, use this link for
	# the ezid.cdlib.org homepage http://bit.ly/1Q5dKH0
	# ask maria

	my $prov_text = $provider
		? "If the \"provider\" information,</p>\n"
		  . "<pre>     $provider</pre>\n"
		  . "<p>makes sense (requesters are often confused by this\n"
		  . "means), also CC the provider. "
		: "";
	my $response_letter = << "EOT";
Subject: NAAN request for $orgname
Content-Type: text/html; charset=utf-8

<html>
<head>
<title></title>
</head>
<body>
<p>
Proposed new entry:
</p>
<pre>
$safe_naa_entry
</pre>
</p>
<p>
Below the cut line is a proposed response email, intended to be sent to: $email
<br/><br/>
Start to forward that email to the intended recipient, adding a CC to
NAAN-Registrar\@googlegroups.com and removing evidence of forwarding (eg,
your email agent may insert "Fwd: " into the Subject line).
$prov_text
Then remove any footer (eg, might be added by an email group).
</p><p>
Finally, proofread the rest. Among other things, check that (a) the salutation
makes sense (uses the recipient's given (first) name, (b) the organization name
is correct, and (c) your signature is correct. Also check that any service
provider is CC'd and all questions or anomalies arriving with the request have
been addressed by adding your own customized response text (usually in the
first paragraph).
</p>
<p>
--------- CUT HERE ---------
</p>
<p>
Hi $firstname,
</p><p>
Thanks for your request. The NAAN,
</p><p style="margin-left:4em">
$naan
</p><p>
has been registered for "$institution" and you may begin using it immediately. It may take up to 24 hours before your NAAN will be recognized by the N2T.net resolver.
</p><p>
Please note that $naan is intended for assigning ARKs to content that your institution directly curates or creates.
In case you work with other institutions that use your tools and services for content that they curate or create, those institutions should have their own NAANs.
</p><p>
In thinking about how to manage the namespace, you may find it helpful to consider the usual practice of partitioning it with reserved prefixes of, say 1-5 characters, eg, names of the form "ark:/$naan/xt3...." for each "sub-publisher" in an organization.
Opaque prefixes that only have meaning to information professionals are often a good idea and have precedent in schemes such as ISBN and ISSN.
</p><p>
The best starting place for information on ARKs (Archival Resource Keys) is the
<a href="https://wiki.lyrasis.org/display/ARKs/ARK+Identifiers+FAQ">ARKs FAQ</a>
(<a href="https://wiki.lyrasis.org/pages/viewpage.action?pageId=178880619">version française</a>,
<a href="https://wiki.lyrasis.org/pages/viewpage.action?pageId=185991610">version en español</a>)
and <a href="http://n2t.net/e/ark_ids.html">this ARK identifier overview</a>.
The <a href="https://n2t.net/ark:/13030/c7cv4br18">ARK specification</a> is currently the best guide for how to create URLs that comply with ARK rules, although it is fairly technical.
There is a <a href="https://groups.google.com/group/arks-forum">public discussion group for ARKs</a>
(<a href="https://framalistes.org/sympa/info/arks-forum-fr">forum francophone</a>)
intended for people interested in sharing with and learning from others about how ARKs have been or could be used in identifier applications.
The best open source software for setting up your own ARK service implementation is currently <a href="http://n2t.net/e/noid.html">Noid</a>.
</p><p>
There's nothing else you need to do right now.
As you may know, there's an initiative to build an open, international community around ARKs, <a href="http://ARKsInTheOpen.org">ARKsInTheOpen.org<a/>.
We're also drafting some <a href="https://n2t.net/ark:/13030/c7833mx7t">standardized persistence statements</a> that name assigning authorities can begin testing (feedback is welcome) and using if they wish.
</p><p>
-$rname, on behalf of NAAN-Registrar\@googlegroups.com
</p>
</body>
</html>
EOT

#</p><p>
#While no payment is required to use the ARK scheme, there are optional fee-based services that can help with technical and management tasks.
#For example, the California Digital Library (CDL) provides a fee-based service called EZID (https://ezid.cdlib.org) that you can use to manage your namespace, which includes minting and resolving ARKs, as well as maintaining metadata.
#Please contact ezid\@ucop.edu if you are interested in EZID.
#-John
#</p>
#<br/>
#<pre>
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#John A. Kunze            California Digital Library
#415 20th St, #406         University of California
#Oakland, CA  94612         Office of the President
# jak\@ucop.edu      \@jakkbl      W:+1 510 987 9231     
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	#open OUT,
	#  "|mail -S ttycharset=UTF-8 -s 'NAAN request for $acronym' \
	#            jakkbl\@gmail.com"
	#  	or die("couldn't open pipe to email response");

	# save letter to a file
	open OUT, ">", "new_naa_response.html" or
		perr("could not open new_naa_response.html file"),
		exit 1;
	print OUT $response_letter;
	close OUT;

	if ($remail) {
		# send letter to admin address (may not work on some networks)
		open OUT, "|sendmail $remail" or
			perr("could not open pipe to email response"),
			exit 1;
		print OUT $response_letter;
		close OUT;
	}
	else {
		print "----------------------\n";
		print $response_letter;
	}

	exit 0;
}

__END__


########

#  Your Name:	Gautier Poupeau
#  Contact email address:	gpoupeau@ina.fr
#  Organization name:	Institut national de l'audiovisuel
#  Position in organization:	Data architect
#  Organization address:	4 avenue de l'Europe, 94366 Bry-sur-Marne Cedex
#  Organization base URL:	http://www.ina.fr
#  Organization status:	For profit

#+how:   NP | (:unkn) unknown | 2016 |
#+!why:  EZID ARK-only
#+!contact: Flynn, Allen ||| ajflynn@med.umich.edu | +1 734-615-0839
#+!address: 300 North Ingalls Street, 11th Floor, Suite 1161
