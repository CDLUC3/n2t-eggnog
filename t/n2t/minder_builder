# yyy Preserving the ordering of these sections MAY be important

# This bash script subfile is meant to be source'd by a caller that defines
# the current directory and any variable settings that may be needed.  
# Should be run from within $buildout_root.

echo Initializing rewrite-plus.conf.

# We need to define a one-line blob of headers with !!! separating each.
# This will be encoded so it fits contains no newlines and can be passed
# for logging and content negotiation purposes in the resolver protocol.
# Uses $hdrblob defined in build_server_tree.
#
# Remember to quote $ \ and ` in << blocks, or (in this case) to protect regexp
# special chars, by having them appear only as result of parameter expansion.
#
cat <<- EOT > $rwplus.pre
# This file was automatically created by build_server_tree.
# It deals with more frequently occurring resolution cases that should
# appear (via early "Include") before less frequently occurring cases.

# NB: The "prg:" programs won't start up properly until the binders they
#     open actually exist.  You cannot easily create them within a test
#     script that starts by starting apache, so we create them beforehand.

# Each of these programs needs a corresponding create_test_rmap call
# AND a rewrite rule for when a specific single resolver is requested
# (using ^/r/...) by a user/tester.

# Feb 2022: all IA ARKs to be resolved by IA resolver
# Removed special case RewriteRule to consult N2T's IA/OCA binder,
# and that way the first lookup will fail and fall through to NAAN
# registry setting.

## Temporary transition rule for new s2 shoulder 2021.11.19
#RewriteRule ^/(ark:/?13960/s2.*)\$ "https://ark.archive.org/\$1" [L]
    
## Internet Archive YYY this one-off does not scale
#RewriteRule ^/(ark:/?13960.*)\$ \\
#    "_rslv_\${map_oca:\${esc:\$1%{ENV:THUMPER}}.resolve \${$hdrblob}}" [NC]

# Added "[^/]*" to end of NAAN below to accommodate NAAN-dev constructs.

# INCIPIT YYY this one-off does not scale
#ark:/99999/fk3                         # ncpt
#ark:/99999/ffk3                        # ncpt_test
#ark:/68061				# ncpt
#ark:/63274				# ncpt
#ark:/19156				# ncpt
RewriteRule ^/(ark:/?19156.*)\$ \\
    "_rslv_\${map_ncpt:\${esc:\$1%{ENV:THUMPER}}.resolve \${$hdrblob}}" [NC]
RewriteRule ^/(ark:/?63274.*)\$ \\
  "_rslv_\${map_ncpt:\${esc:\$1%{ENV:THUMPER}}.resolve \${$hdrblob}}" [NC]
RewriteRule ^/(ark:/?68061.*)\$ \\
    "_rslv_\${map_ncpt:\${esc:\$1%{ENV:THUMPER}}.resolve \${$hdrblob}}" [NC]
RewriteRule ^/(ark:/?99999[^/]*/ff?k3.*)\$ \\
    "_rslv_\${map_ncpt:\${esc:\$1%{ENV:THUMPER}}.resolve \${$hdrblob}}" [NC]

# INCIPIT YYY this one-off does not scale
# to create shoulder, do: make_shdr ark:/99166/p3 ncpt
# XXX need way for this to happen on server build???
#ark:/99166/p3    # ncpt agents, since by default all 99166 goes to EZID binder
RewriteRule ^/(ark:/?99166[^/]*/p3.*)\$ \\
    "_rslv_\${map_ncpt:\${esc:\$1%{ENV:THUMPER}}.resolve \${$hdrblob}}" [NC]

# Islandora YYY this one-off does not scale
#ark:/99999/fq3                          # idra
#ark:/99999/ffq3                         # idra_test
#RewriteRule ^/(ark:/?99999[^/]*/ff?q3.*)\$ \\
#    "_rslv_\${map_idra:\${esc:\$1%{ENV:THUMPER}}.resolve \${$hdrblob}}" [NC]

# YYY this rule works for all registered NAANs
# This permits local resolvers to publish test/fake 99999-based ARKs via N2T
#RewriteRule ^/ark:/?(99999[^/]*/9([^_]+)_.*)\$ "/ark:/\$2/\$1" [NC,R=302]
RewriteRule ^/ark:/?(99999[^/]*/9([^_]+)_.*)$ "%{REQUEST_SCHEME}://%{SERVER_NAME}/ark:/\$2/\$1" [NC,R=302]

#RewriteRule ^/ark:/?99152.*\$      "_rslv_\${map_yamz:%{REQUEST_URI}.resolve \${$hdrblob}}"

# XXX drop this and rely on shoulder file?
# TemaTres YYY this one-off does not scale
#ark:/99152/t3				# TemaTres vocabulary shoulder
#RewriteRule ^/(ark:/?99152[^/]*/t3.*)\$ \\
#    "https://vocabularyserver.com/\$1" [R=302,L,NC]

# Periodo YYY this one-off does not scale
#  # This shoulder is designed to support the single ARK, ark:/99152/p0,
#  # which is registered mainly to support suffix passthrough.
#ark:/99152/p0:
#  manager: "ezid"
#  name: "OpenContext PeriodO"
#  date: "2015.01.26"
# XXX drop this and rely on shoulder file?
RewriteRule ^/(ark:/?99152[^/]*/p0.*)\$ \\
    "_rslv_\${map_ezid:\${esc:\$1%{ENV:THUMPER}}.resolve \${$hdrblob}}" [NC]

# XXX drop this and rely on shoulder file?
# YAMZ YYY this one-off does not scale
#RewriteRule ^/(ark:/?99152.*)\$ \\
#    "_rslv_\${map_yamz:\${esc:\$1%{ENV:THUMPER}}.resolve \${$hdrblob}}" [NC]

# xxx The handful of Exceptions below should be done via scheme/shoulder DB
#
## Exception: SNACC project (has own resolver)
## Using 303 redirects to indicate surrogacy, per Linked Open Data demands.
#RewriteRule ^/ark:/?(99166/w6.*)\$   http://socialarchive.iath.virginia.edu/ark:/\$1 [R=303,L,NC]

# Exception: CrossRef project
#RewriteRule ^/eoi:/?(.*)\$   "_rslv_\${map_xref:doi:\${uc:\$1}.get _t}"
#RewriteRule ^/eoi:/?.*\$ \\
#  "_rslv_\${map_xref:%{REQUEST_URI}.resolve \${$hdrblob}}" [NC]

# XXX drop this since it's a defined prefix and we don't really do purls?
#RewriteRule ^/purl:/?.*\$ \\
#  "_rslv_\${map_purl:%{REQUEST_URI}.resolve \${$hdrblob}}" [NC]

# XXX 
# XXX is there a default n2t binder that we drop through to for namespace
#     splitting? called "split?"

#
# Exception: PURL.org project
#RewriteRule ^/purl:/?.*\$ \\
#  "_rslv_\${map_purl:%{REQUEST_URI}.resolve \${$hdrblob}}" [NC]
#
## Exception: BNF (has own resolver)
#RewriteRule ^/ark:/?(12148.*)\$   http://ark.bnf.fr/ark:/\$1 [R=302,L,NC]
##
## Exception: UNT (has own resolver)
#RewriteRule ^/ark:/?(67531.*)\$   http://digital.library.unt.edu/ark:/\$1 [R=302,L,NC]
##
## Exception: SPMC (has own resolver)
#RewriteRule ^/ark:/?(76951.*)\$   http://ark.spmcpapers.com/ark:/\$1 [R=302,L,NC]

# xxx ACTION for princeton
# On Thu, May 23, 2019 at 8:02 AM Esme Cowles <escowles@princeton.edu> wrote:
# Yes, we're fine handling both http and https for arks.princeton.edu
# locally. It looks like it can just be a cert and a redirect to n2t.net
# on our load-balancer, so it should be minimal for us to maintain. I agree
# there's no rush, since the vast majority of our links and systems use http
# URLs, so this error isn't seen in the wild very often.
#
# That said, given the issues with hosting https and dealing with certs for
# other domains, you may want to let other folks with pointers or virtual
# hosts on n2t.net to know about this issue — I'm assuming this same error
# happens for anyone with a custom domain that's pointed at n2t.net.
# -Esmé
# XXX here's a special rule for arks.princeton.edu; it should be somewhere else!
#     do we even need to mention arks.princeton.edu? shouldn't it work if
#     we remain silent?
#     TEST: try coming in via n2t.info after removing it

# Redirect non-canonical hostnames to the canonical hostname (n2t.net).
RewriteCond %{HTTP_HOST} ^(www\\.n2t\\.net|(www\\.)?n2t\\.(com|info|me|org))|arks\\.princeton\\.edu\$ [NC]
RewriteRule ^/(.*) http://n2t.net/\$1 [L,R=permanent]

#From Debra Bartling:
#www.arks.org is a cname => n2t.net.
#The zone apex (arks.org) cannot be a CNAME, so it is configured as an A record
#ALIAS directly to your n2t production load balancer. If you nslookup n2t.net or
#arks.org you will see the same response. MAKE A NOTE of this in case we ever
#change the name of your load balancer. It is a "Classic" load balancer; at some
#point we may need to update to the newer "Application" load balancer.

# yyy Greg's rule; is it needed? what about localhost?
## Forbid all other hostnames, IP addresses, etc., just in case.
#RewriteCond %{HTTP_HOST} !^n2t\.net\$ [NC]
#RewriteRule .* - [L,F]

# # Special case: map_all is special as it is the default top-level resolver.
# # This is the most common and important rule to put first (for speed).
# #     
# RewriteRule ^/(\w+:.*)\$ "_rslv_\${map_all:\$1.get _t}"
#

# xxx /i/inflect, where i=indirects (inflections, content neg, multi-redirects)
# curl -D – -L -H   “Accept: application/rdf+xml”
# curl -D – -L -H   “Accept: text/turtle”
# curl -D – -L -H   “Accept: application/atom+xml”
# "http://dx.doi.org/10.1126/science.1157784"

# All the rest go to the EZID resolver, which is where, after
# unsuccessful lookup, we expect non-N2T-hosted NAAN redirects to go
# xxx not most graceful support for multiple resolvers and non-N2T-hosted NAANs
# XXX add [L] flag to prevent extra redirect?
#
#RewriteRule ^/ark:/?(.*)\$   "_rslv_\${map_ezid:ark:/\$1.get _t}"

#RewriteRule ^/ark:/?.*\$ \\
#    "_rslv_\${map_ezid:ark:/\$1.resolve \${$hdrblob}}"
# XXX should these rules consistently prepend "ark:/" to rewrite map?
#     (currently, eg, this next rule strips it)

# --- old mainstream
#RewriteRule ^/ark:/*(.*)\$ \\
#    "_rslv_\${map_ezid:ark:/\$1%{ENV:THUMPER}.resolve \${$hdrblob}}" [NC]
## before cnflect() appeared, we took the "ark:/" out for resolution, and then
## normalized it BACK INTO the id ; now we pass it in for lookup
##   "_rslv_\${map_ezid:\$1%{ENV:THUMPER}.resolve \${$hdrblob}}" [NC]
#
## xxx after testing, this rule and previous rule should be combined?
#RewriteRule ^/((urn:)?uuid:.*)\$ \\
#    "_rslv_\${map_ezid:\$1%{ENV:THUMPER}.resolve \${$hdrblob}}" [NC]

# Explicit resolver given by user (not so common)
#RewriteRule ^/r/([^/]+)/+(.*)\$ "_rslv_\${map_\$1:\$2.get _t}"

# xxx no rule for xref?
#RewriteRule ^/[tT]-ark:/?13960/?.*\$      "_rslv_\${map_oca_test:%{REQUEST_URI}.resolve \${$hdrblob}}" [NC]
#RewriteRule ^/[tT]-ark:/?99152/?.*\$      "_rslv_\${map_yamz_test:%{REQUEST_URI}.resolve \${$hdrblob}}" [NC]
#RewriteRule ^/[tT]-ark:/?.*\$             "_rslv_\${map_ezid_test:%{REQUEST_URI}.resolve \${$hdrblob}}" [NC]

# yyy leave these? they're used in some binder tests
RewriteRule ^/([tT]-ark:/?13960.*)\$ \\
   "_rslv_\${map_oca_test:\${esc:\$1%{ENV:THUMPER}}.resolve \${$hdrblob}}" [NC]
RewriteRule ^/([tT]-ark:/?99152.*)\$ \\
   "_rslv_\${map_yamz_test:\${esc:\$1%{ENV:THUMPER}}.resolve \${$hdrblob}}" [NC]
RewriteRule ^/([tT]-ark:.*)\$ \\
   "_rslv_\${map_ezid_test:\${esc:\$1%{ENV:THUMPER}}.resolve \${$hdrblob}}" [NC]

## xxx isn't this more generic, less specific to n2t?
## This rule comes after the t-ark rules because it would otherwise match them.
## It should match any of our prefixes, including those with provider codes
## and weird prefixes (eg, inchi=) that end in '=' instead of ':'.
##
#RewriteRule ^/(\w[\w/.-]*[:=].*)\$ \\
#    "_rslv_\${map_ezid:\${esc:\$1%{ENV:THUMPER}}.resolve \${$hdrblob}}" [NC]


########### this rule is mainstream resolution ################

## Anything left: arks, prefixes, file paths
# Anything other than patterns matching ^_rslv_ rules which may have
# resulted from prior yamz or oca rewrites (eg, inflections)

# NB: $0 is whole string matched by RewriteRule _following_ RewriteCond
#RewriteCond $0 !"^_rslv_"	
RewriteRule ^/(.*)\$ \\
    "_rslv_\${map_ezid:\${esc:\$1%{ENV:THUMPER}}.resolve \${$hdrblob}}" [NC]

#RewriteRule ^/ark:/?99152.*\$ \\
#    "_rslv_\${map_yamz:%{REQUEST_URI}.resolve \${$hdrblob}}"
#RewriteRule ^/(ark:/?99152.*)\$ \\
#    "_rslv_\${map_yamz:\${esc:\$1%{ENV:THUMPER}}.resolve \${$hdrblob}}" [NC]


# XXX ?add rule to check if ^/ark: and empty result and for DSC or
# escholarship arks, and do kludgy redirects to those systems?

#XXX these next _rslv_ rules belong in main build_server_tree?
#RewriteCond %{REQUEST_URI???} ^_rslv_redir
# for efficiency, do these tests only if above condition is met
RewriteRule "^_rslv_redir302 +(.+)"   \$1 [R=302,L,NE]
RewriteRule "^_rslv_redir303 +(.+)"   \$1 [R=303,L,NE]
# these next are to support PURLs
RewriteRule "^_rslv_redir301 +(.+)"   \$1 [R=301,L,NE]
RewriteRule "^_rslv_redir307 +(.+)"   \$1 [R=307,L,NE]
# xxx do 404 and 410 redirects even make sense?
RewriteRule "^_rslv_redir404 +(.+)"   \$1 [R=404,L,NE]
RewriteRule "^_rslv_redir410 +(.+)"   \$1 [R=410,L,NE]
# yyy error messages
#RewriteRule "^_rslv_redir399 +(.+)"   http://n2t.example.com/\$1 [R=303,L,NE]
RewriteRule "^_rslv_redir399 +(.+)"   \$1 [L,NE]
# Egg code maps all unknown codes to 302 so don't need to check further here.
#RewriteRule "^_rslv_redir\\S* +(.+)"   \$1 [R=302,L,NE]

# yyy it seems bizarre that you cannot call a script with args, but have
# to pass args in via a QUERY_STRING env variable -- is this really true?
# XXXXXX absence of --home arg - bug?
#
RewriteRule "^_rslv_inflect +(.+)" \\
  "$document_root/e/x/inflect? --api --ua %{QUERY_STRING} \$1" [L]
#  "$document_root/e/x/inflect? --api $tlog --ua %{QUERY_STRING} \$1" [L]

# yyy it seems bizarre that you cannot call a script with args, but have
# to pass args in via a QUERY_STRING env variable -- is this really true?
# XXXXXX absence of --home arg - bug?
#
RewriteRule "^_rslv_pfxlookup +(.+)" \\
  "$document_root/e/x/pfxlookup? --api --ua %{QUERY_STRING} \$1" [L]

#RewriteRule "^_rslv_multi +(.+)" \\
#  "$document_root/e/x/multi? --api $tlog --ua %{QUERY_STRING} \$1" [L]

# # Next rule lets us resolve against test binders with "t-ark:", "t-doi:", etc.
# RewriteRule ^/[tT]-(\w+:.*)\$ "_rslv_\${map_all_test:\$1.get _t}"

# RewriteMap refuses to pass any env vars, so we call a wrapper script first.

# # "all" is to test resolution across all binders: ezid, oca, yamz, etc.
# RewriteMap map_all	prg:$rmap_root/all/rmap_all
# RewriteMap map_all_test	prg:$rmap_root/all_test/rmap_all_test
EOT

echo Building out custom n2t server stuff.

# NB: Mac Unix (a) doesn't document cp -r and (b) doesn't create an
#     n2t_vision_files subdir under htdocs/e IF you append a / !!

tr=$template_root
cp -pr $tr/e/n2t_vision_files $buildout_root/htdocs/e

# # ??? yyy Don't add naanders to these next two lists.
# #
# create_test_rmap all all:ezid:oca:yamz
# create_test_rmap all_test all_test:ezid_test:oca_test:yamz_test

echo Creating default YAMZ and OCA minters.
# default YAMZ and OCA minters are different from usual default

ppltr=n2t
mtemplate=ddddd

# We call with -Mblib since this script is often run _before_ any scripts
# have been installed yet, when the only way we can access our own code is
# by using what's in the source directory (only callable with -Mblib).
#
cmd='perl -Mblib nog'
if [[ -d $minters_root/$ppltr/naans ]]
then
	echo Minter $ppltr/naans already exists.
else
	echo Creating $ppltr/naans minter from scratch.
	(cd $src_top;
		# These next lines are customized for minting NAANs.
		#
		# Note that although we could be filtering out leading
		# zeroes with native nog (and --oklz 0), the original
		# NAAN minter did produce leading zeroes, and so we
		# continue that tradition and do post-nog filtering.
		#
		$cmd -d $minters_root/$ppltr/naans mkminter \
			--type rand --atlast stop "" $mtemplate
		echo "To start a NAANs minter from scratch:"
		echo "    cp -pr $minters_root/$ppltr ~/minters"
	)
fi

# XXX add minter: field to each shared shoulder!!
#
#
#
#
# This legacy minter, created 2013.02.12, minted 4,030,509 spings in two
# big batches.
# yyy On 2015.0.25 nog (on ec2) minted 4M spings in one run, taking 15 mins.
ppltr=snacc	# yyy not actually a populator, but it gets its own directory
naanshdr=99166/w6
mtemplate=eedeek
# -Mblib again, since pre-installation code only callable from source tree.
cmd='perl -Mblib nog'
if [[ -d $minters_root/$ppltr/ark/$naanshdr ]]
then
	echo Minter $ppltr/ark/$naanshdr already exists.
else
	echo Creating $ppltr/ark/$naanshdr from scratch.
	(cd $src_top;
		# These next lines are customized for the SNACC project.
		mkdir -p $minters_root/$ppltr/ark
		$cmd -p $minters_root/$ppltr/ark mkminter \
			--type rand --atlast add3 $naanshdr $mtemplate
		echo "To start a SNACC minter from scratch:"
		echo "    cp -pr $minters_root/$ppltr ~/minters"
	)
fi

# XXX remove this stuff soon
ppltr=yamz
mtemplate=ddd
# -Mblib again.
cmd='perl -Mblib nog'
for m in h fk2			# create a production and test minter
do
	#naanshdr=99152/h
	naanshdr=99152/$m
	if [[ -d $minters_root/$ppltr/ark/$naanshdr ]]
	then
		echo Minter $ppltr/ark/$naanshdr already exists.
	else
		echo Creating $ppltr/ark/$naanshdr minter from scratch.
		(cd $src_top;
			# These next lines are customized for YAMZ.
			# "--oklz 0" is implied by "--type seq"
			$cmd -p $minters_root/$ppltr/ark mkminter \
				--type seq --atlast add1 $naanshdr $mtemplate
			$cmd -d $minters_root/$ppltr/ark/$naanshdr mint 1001 \
				> /dev/null
		)
	fi
done

# XXX remove this stuff soon
ppltr=oca
naanshdr=13960/t
mtemplate=deedeedk
# -Mblib again.
cmd='perl -Mblib nog'
if [[ -d $minters_root/$ppltr/ark/$naanshdr ]]
then
	echo Minter $ppltr/ark/$naanshdr already exists.
else
	echo Creating $ppltr/ark/$naanshdr from scratch.
	(cd $src_top;
		# These next lines are customized for OCA.
		$cmd -p $minters_root/$ppltr/ark mkminter \
			--type rand --atlast add3 $naanshdr $mtemplate
	)
fi

# xxx Use n2t binder to help with the rewrite mappings?
# (ark:/?13960.*) -> r/oca/
#(cd $src_top; perl -Mblib egg -d $binders_root/n2t - << EOT
#ark:/13960.fetch
#ark:/99152.fetch
#EOT
#)
